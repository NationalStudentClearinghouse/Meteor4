<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002 National Student Clearinghouse
  
  This code is part of the Meteor system as defined and specified 
  by the National Student Clearinghouse and the Meteor Sponsors.
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.
  
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->
<xsl:stylesheet version="1.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	
	<xsl:output
		method="xml"
		encoding="UTF-8" />
		
	<!-- Add PESCXMLVersion to root node if none exists -->
	<xsl:template match="/*[not(@PESCXMLVersion)]">
		<xsl:copy>
			<xsl:attribute name="PESCXMLVersion">4.0.0</xsl:attribute>
			<xsl:apply-templates select="@* | node()"/>
		</xsl:copy>
	</xsl:template>
	
	<xsl:template match="//@PESCXMLVersion">
		<xsl:attribute name="PESCXMLVersion">4.0.0</xsl:attribute>
	</xsl:template>
	
	<!-- Remove superfluous DataProviderAggregateTotal elements by only selecting the last one -->
	<xsl:template match="//MeteorDataProviderDetailInfo/DataProviderAggregateTotal"/>
	<xsl:template match="//MeteorDataProviderDetailInfo/DataProviderAggregateTotal[last()]">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()"/>
		</xsl:copy>
	</xsl:template>
	
	<!-- Remove empty Contacts/Phone and AddressInfo elements -->
	<xsl:template match="//Contacts/Phone[not(string(.))] | //Contacts/AddressInfo[not(string(.))]"/>
	
	<!-- Remove empty Employer elements -->
	<xsl:template match="//Employer[not(string(.))]"/>
	
	<!-- 
	- Format dates from YYYYMMDD to YYYY-MM-DD 
	-->
	<xsl:template match="//Default/EligibilityReinstatementDate[string-length(.) = 8] | //Student/GradDt[string-length(.) = 8]">
		<xsl:copy>
			<xsl:value-of select="concat(substring(.,1,4),'-',substring(.,5,2),'-',substring(.,7))"/>
		</xsl:copy>
	</xsl:template>
	
	<!-- 
	- Ensure MeteorDataProviderMsgs are located after MeteorDataProviderAwardDetails and are not named "MeteorDataProviderMessage"
	-->
	<xsl:template match="//MeteorDataProviderInfo[MeteorDataProviderAwardDetails/MeteorDataProviderMsg] | //MeteorDataProviderInfo[MeteorDataProviderAwardDetails/MeteorDataProviderMessage]">
		<xsl:copy>
            <xsl:apply-templates select="@* | node()"/>
            <xsl:for-each select="MeteorDataProviderAwardDetails/MeteorDataProviderMsg | MeteorDataProviderAwardDetails/MeteorDataProviderMessage">
            	<MeteorDataProviderMsg>
            		<xsl:apply-templates select="RsMsg"/>
            		<xsl:apply-templates select="RsMsgLevel"/>
            	</MeteorDataProviderMsg>
            </xsl:for-each>
        </xsl:copy>
	</xsl:template>
	<xsl:template match="//MeteorDataProviderAwardDetails/MeteorDataProviderMsg | //MeteorDataProviderAwardDetails/MeteorDataProviderMessage"/>
	
	<!-- 
	- RsMsgType must be either 'E','I', or 'W' (error, info, warning). Default to 'I'
	-->
	<xsl:template match="//RsMsgLevel[. != 'E' and . != 'I' and . != 'W']">
		<xsl:copy>I</xsl:copy>
	</xsl:template>
	
	<!-- 
		Remove any 0000-00-00 or 00000000 dates generated by 3.3.4 data providers for empty xsd:date elements
	 -->
	<xsl:template match="//AddressInfo/AddrValidDt[starts-with(.,'0000')]"/>
	<xsl:template match="//Award/AwardBeginDt[starts-with(.,'0000')] | //Award/AwardEndDt[starts-with(.,'0000')] | //Award/LoanStatDt[starts-with(.,'0000')]"/>
	<xsl:template match="//CollectionCosts/CollectionCostsDate[starts-with(.,'0000')]"/>
	<xsl:template match="//Default/DefAvertRqDt[starts-with(.,'0000')] | //Default/DefAvertRqCureDt[starts-with(.,'0000')] | //Default/ClaimFilDt[starts-with(.,'0000')] | //Default/ClaimPdDt[starts-with(.,'0000')] | //Default/EligibilityReinstatementDate[starts-with(.,'0000')]"/>
	<xsl:template match="//DefermentForbearance/DefermentForbearanceBeginDate[starts-with(.,'0000')] | //DefermentForbearance/DefermentForbearanceEndDate[starts-with(.,'0000')]"/>
	<xsl:template match="//Disbursement/SchedDisbDt[starts-with(.,'0000')] | //Disbursement/ActualDisbDt[starts-with(.,'0000')] | //Disbursement/DisbStatDt[starts-with(.,'0000')] | //Disbursement/CancellationDate[starts-with(.,'0000')]"/>
	<xsl:template match="//LateFees/LateFeesDate[starts-with(.,'0000')]"/>
	<!-- PaymentDt is required... xsl:template match="//LastPmt/PaymentDt[starts-with(.,'0000')]"><xsl:copy /></xsl:template -->
	<xsl:template match="//LoanTransfer/TransferDt[starts-with(.,'0000')]"/>
	<xsl:template match="//OtherFees/OtherFeesDate[starts-with(.,'0000')]"/>
	<xsl:template match="//Phone//PhoneValidDt[starts-with(.,'0000')]"/>
	<xsl:template match="//Reference/DtOfBirth[starts-with(.,'0000')] | //Borrower/DtOfBirth[starts-with(.,'0000')] | //Student/DtOfBirth[starts-with(.,'0000')] | //Student/GradDt[starts-with(.,'0000')]"/>
	<xsl:template match="//Repayment/NextDueDt[starts-with(.,'0000')] | //Repayment/AcctBalDt[starts-with(.,'0000')] | //Repayment/PmtBeginDt[starts-with(.,'0000')]"/>
	<xsl:template match="//ServicingFees/ServicingFeesDate[starts-with(.,'0000')]"/>
	 
	<xsl:template match="//Award/GuarDt"><xsl:if test=". != '0000-00-00'">
		<LoanDt><xsl:value-of select="."/></LoanDt>
	</xsl:if></xsl:template>
	
	<xsl:template match="//Contacts/Email">
		<xsl:copy><EmailAddress><xsl:value-of select="."/></EmailAddress></xsl:copy>
	</xsl:template>

	<xsl:template match="//DataProviderData/Contacts/AddressInfo[last()]">
        <xsl:copy>
            <xsl:apply-templates select="@* | node()" />
        </xsl:copy>
        <xsl:if test="//DataProviderData/Email != ''">
        <Email>
            <EmailAddress><xsl:value-of select="//DataProviderData/Email" /></EmailAddress>
        </Email>
        </xsl:if>
    </xsl:template>
	
	<xsl:template match="//DataProviderData/Email"/>
	
	<xsl:template match="//Award[Student/SSNum = Borrower/SSNum]/AwardType[. = 'FFELPLUS']">
		<AwardType>FFELGB</AwardType>
	</xsl:template>
	
	<xsl:template match="//Award[Student/SSNum = Borrower/SSNum]/AwardType[. = 'DLPLUS']">
		<AwardType>DLGB</AwardType>
	</xsl:template>
	
	<!-- 
	- Move GrossLoanAmount to the end of Award's children
	-->
	<xsl:template match="//Award">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()[not(self::GrossLoanAmount | self::Default)]"/>
			<xsl:apply-templates select="Default"/>
			<xsl:copy-of select="GrossLoanAmount"/>
		</xsl:copy>
	</xsl:template>
	
	<!-- 
	- Enforce sequence of Award elements
	-->
	<xsl:template match="//Award">
		<xsl:copy>
			<xsl:apply-templates select="DataProviderType"/>
			<xsl:apply-templates select="AwardType"/>
			<xsl:apply-templates select="AwardAmt"/>
			<xsl:apply-templates select="AwardBeginDt"/>
			<xsl:apply-templates select="AwardEndDt"/>
			<xsl:apply-templates select="GradeLevelInd"/>
			<xsl:apply-templates select="LoanStat"/>
			<xsl:apply-templates select="LoanStatDt"/>
			<xsl:apply-templates select="MPNInd"/>
			<xsl:apply-templates select="Esign"/>
			<xsl:apply-templates select="CommonlineError"/>
			<xsl:apply-templates select="GuarDt"/>
			<xsl:apply-templates select="Disbursement"/>
			<xsl:apply-templates select="Student"/>
			<xsl:apply-templates select="Borrower"/>
			<xsl:apply-templates select="Reference"/>
			<xsl:apply-templates select="DisbursingAgent"/>
			<xsl:apply-templates select="Lender"/>
			<xsl:apply-templates select="Servicer"/>
			<xsl:apply-templates select="ConsolLender"/>
			<xsl:apply-templates select="School"/>
			<xsl:apply-templates select="Guarantor"/>
			<xsl:apply-templates select="AwardId"/>
			<xsl:apply-templates select="LoanTransfer"/>
			<xsl:apply-templates select="Repayment"/>
			<xsl:apply-templates select="Default"/>
			<xsl:apply-templates select="GrossLoanAmount"/>
		</xsl:copy>
	</xsl:template>
	
	<!-- 
	- Enforce sequence of Repayment elements 
	-->
	<xsl:template match="//Repayment">
		<xsl:copy>
			<xsl:apply-templates select="NextPmtAmt"/>
			<xsl:apply-templates select="NextDueDt"/>
			<xsl:apply-templates select="AcctBal"/>
			<xsl:apply-templates select="AcctBalDt"/>
			<xsl:apply-templates select="PmtPlan"/>
			<xsl:apply-templates select="LastPmt"/>
			<xsl:apply-templates select="PmtBeginDt"/>
			<xsl:apply-templates select="CurrIntRate"/>
			<xsl:apply-templates select="RepaidPrincipalAmt"/>
			<xsl:apply-templates select="CapitalizedIntAmt"/>
			<xsl:apply-templates select="TotalPreviousPayments"/>
			<xsl:apply-templates select="AccruedInterest"/>
			<xsl:apply-templates select="LateFees | LateFeesAmount"/>
			<xsl:apply-templates select="CollectionCosts"/>
			<xsl:apply-templates select="ServicingFees | ServicingFeesAmount"/>
			<xsl:apply-templates select="OtherFees | OtherFeesAmount"/>
			<xsl:apply-templates select="DefermentForbearance"/>
		</xsl:copy>
	</xsl:template>
	
	<!--
	- Encapsulate Repayment/LateFeesAmount + Date in Repayment/LateFees
	- Encapsulate Repayment/ServicingFeesAmount + Date in Repayment/ServicingFees
	- Encapsulate Repayment/OtherFeesAmount + Date in Repayment/OtherFees
	-->
	<xsl:template match="//Repayment/LateFeesAmount">
		<LateFees>
			<xsl:copy-of select="."/>
			<xsl:copy-of select="../LateFeesDate"/>
		</LateFees>
	</xsl:template>
	<xsl:template match="//Repayment/LateFeesDate"/>
	<xsl:template match="//Repayment/ServicingFeesAmount">
		<ServicingFees>
			<xsl:copy-of select="."/>
			<xsl:copy-of select="../ServicingFeesDate"/>
		</ServicingFees>
	</xsl:template>
	<xsl:template match="//Repayment/ServicingFeesDate"/>
	<xsl:template match="//Repayment/OtherFeesAmount">
		<OtherFees>
			<xsl:copy-of select="."/>
			<xsl:copy-of select="../OtherFeesDate"/>
		</OtherFees>
	</xsl:template>
	<xsl:template match="//Repayment/OtherFeesDate"/>
	
	<!-- 
	- Remove EligibilityReinstatementIndicator if not true or false
	-->
	<xsl:template match="//Default/EligibilityReinstatementIndicator[not(. = 'true' or . = 'false')]"/>
	
	<!-- 
	- Convert SBS data provider type to S (school)
	-->
	<xsl:template match="//DataProviderType[. = 'SBS']">
		<xsl:copy>S</xsl:copy>
	</xsl:template>
	
	<xsl:template match="@* | node()">
        <xsl:copy>
            <xsl:apply-templates select="@* | node()"/>
        </xsl:copy>
    </xsl:template>
    
</xsl:stylesheet>
